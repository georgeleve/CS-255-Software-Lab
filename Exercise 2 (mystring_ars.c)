/*           mystring_arc.c            */
/* Georgios Gerasimos Leventopoulos    */
/* csd 4152  Assignment2   hy255       */

/* unsigned int or unsigned long == size_t */
/* DO IT USING ARRAYS */

#include "mystring.h"
#include <assert.h>
#include <stddef.h>
#include <stdbool.h>

size_t ms_length(const char pcStr[]) {
    size_t uiLength = 0U;
    assert(pcStr != NULL);
    while (pcStr[uiLength] != '\0')
        uiLength++;
    return uiLength;
}

char *ms_copy(char s[], const char ct[]) {
    assert(s && ct);
    size_t s1=0,ct1 = 0;
    char *temp = s;
    while (ct[ct1] != '\0') {
        s[s1++] = ct[ct1++];
    }
    s[s1] = '\0';
    return temp;
}

char *ms_ncopy(char s[], const char ct[], size_t num) {
    assert(s && ct);
    assert((signed)num >= 0);
    size_t i, s1=0, ct1=0;
    char* temp = s;
    for (i = 0; i < num; i++) {
        if (ct[ct1] != '\0') {
            s[s1++] = ct1[ct++];
        }
        else {
            s[s1++] = '\0';
        }
    }
    s[s1] = '\0';
    return temp;
}

char *ms_concat(char s[], const char ct[]) {
    assert(s && ct);
    char* temp = s;
    size_t s1=0, ct1=0;
    while (s[s1] != '\0') {
        s1++;
    }
    while (ct[ct1] != '\0') {
        s[s1++] = ct[ct1++];
    }
    s[s1] = '\0';
    return temp;
}

char *ms_nconcat(char s[], const char ct[], size_t num) {
    assert(s && ct);
    assert((signed)num >= 0);
    char* temp = s;
    size_t i,s1=0,ct1=0;
    while (s[s1] != '\0') {
        s++;
    }
    for (i = 0; i < num; i++) {
        s[s1++] = ct[ct1++];
    }
    s[s1] = '\0';
    return temp;
}

int ms_compare(const char cs[], const char ct[]) {
    assert(cs && ct);
    size_t cs1 = 0, ct1 = 0;
    while (cs[cs1] == ct[ct1] && ct[ct1] != '\0') {
        cs1++;
        ct1++;
    }
    if (cs[cs1] > ct[ct1]) {
        return 1;
    }
    else if (cs[cs1] < ct[ct1]) {
        return -1;
    }
    else {
        return 0;
    }
}

int ms_ncompare(const char cs[], const char ct[], size_t num) {
    assert(cs && ct);
    assert((signed)num >= 0);
    size_t i,cs1=0,ct1=0;
    for (i = 0; i < num; i++) {
        cs1++;
        ct1++;
    }
    if (cs[cs1] > ct[ct1]) {
        return 1;
    }
    else if (cs[cs1] < ct[ct1]) {
        return -1;
    }
    else {
        return 0;
    }
}

char *ms_search(const char cs[], const char ct[]) {
    assert(cs && ct);
    char* temp;
    int j = 0;
    int i = 0;
    int flag = 1;
    int cs_length = ms_length(cs);
    int ct_length = ms_length(ct);
    while(i < cs_length) {
        if (cs[i] == ct[j]) {
            temp = cs[i];
            while (j < ct_length) {
                if (cs[i] != ct[j]) {
                    break;
                }
                else {
                    flag = 1;
                    if (j == ct_length)return temp;
                    j++;
                    i++;
                    
                }
            }
        i++;
    }
    if(flag == 0) return NULL;
}
